Os comandos serão realizados no Prompt de comando/cmd. 

_____________________________________________________________________________________________________________________________________________

Definir o nome de quem enviará as atualizações para o git utilizamos: 

git config --global user.name "Nome escolhido aqui"

Definir o e-mail de quem enviará as atualizações para o git utilizamos: 

git config --global user.email "e-mail aqui."

git config --global core.editor VScode

Verificar os nomes inputados: 

git config user.email
git config core.editor
git config user.name

Verificar a lista de informações cadastradas.

git config --list
_____________________________________________________________________________________________________________________________________________

Comandos básicos para o prompt.

Utilizamos o comando cd para abrir pastas.

Para verificar todas as pastas no local usamos o comando "tree /f" ou então o "dir".

Para sair da pasta que estamos e retornar ao local anterior usamos o "cd ..".

Após selecionar a pasta do material, usamos o "git init" para inicializar o repositório. 
_____________________________________________________________________________________________________________________________________________

O comando git branch permite criar, listar, renomear e excluir ramificações. Ele não permite alternar entre as ramificações ou reunir um 
histórico bifurcado de novo. Por esse motivo, o comando git branch é muito integrado com os comandos git checkout e git merge.

Os commits são as unidades estruturais de um cronograma de projeto Git. Podem ser considerados instantâneos ou marcos ao longo do cronograma
de um projeto Git. São criados com o comando git commit para capturar o estado de um projeto naquele momento.

Dentro da pasta do projeto nós podemos utilizar o "git status" para o sistema puxar as alterações realizadas.

Podemos incluir individualmente os arquivos fazendo "git add nomedoarquivo" ou incluir todos utilizando o "git add -A".

Para fazer o commit utilizamos o 'git commit -m "Mensagem descrevendo as alterações"'. 

Usamos o "git log" para ver a lista de todos os commits feitos até então no branch.

_____________________________________________________________________________________________________________________________________________

Para saber em qual branch estamos usamos o "git branch".

Temos 3 tipos de reset para retornarmos ao commit anterior, todos eles usando todos os números do commit ou apenas os 7 primeiros. o "git 
reset --soft" retorna no estado escolhido sem as informações estarem commitadas, o "git reset --mixed" vai fazer a mesma coisa do anterior mas
ele não estará pronto para comittar, ou seja, teremos que usar o add novamente, temos também o "git reset --hard", que ignora tudo. 

Para criar um novo branch "git branch nomeDoBranchNovo". Ele pega o histórico do Branch anterior e cria um novo. 

Para alterar de branch para outro usamos o "git checkout nomeDoBranch". 

O "git diff" mostra o que foi alterado entre um commit e outro com detalhes.

Para ver apenas o nome dos arquivos alterados usamos o "git diff --name-only". E " git diff nomedoarquivo.formato para saber apenas o arquivo
desejado.

Após o git diff, caso não tenhamos gostado de alguma alteração, para retirar a mesma do arquivo usamos o "git checkout Head -- nomeDoArquivo"
_____________________________________________________________________________________________________________________________________________

Para acessar/criar a chave SSH e conectar utilizei o link abaixo com o passo a passo. Após instalar o Git Bash. 

https://docs.github.com/pt/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent

Após isso entramos na pasta do usuário em meu computador e la vamos ter a pasta .ssh, onde pegaremos o id público para utilizar na inserção da
chave SSH no settings do github. Após esse registo no próprio projeto temos o comando com o link para inserir no prompt.

O fetch pega as informações do repositório remoto e trazem para o repositório local, o push faz o contrário. 

Utilizei o git push -u origin master no git bash com o token para realizar o primeiro push. Master é o nome da branch.
_____________________________________________________________________________________________________________________________________________

Quando não queremos que determinado arquivo seja enviado ao Github nós usamos o .gitignore, que no caso é, criamos um arquivo com o nome de 
.gitignore e incluímos os nomes(ex: BancoDados.sql) para que sejam ignorados no git status, antes do envio. 